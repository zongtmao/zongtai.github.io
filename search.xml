<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TypeScript</title>
    <url>/TypeScript/</url>
    <content><![CDATA[<h1 id="TypeScript基础"><a href="#TypeScript基础" class="headerlink" title="TypeScript基础"></a>TypeScript基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，TypeScript 在 JavaScript 的基础上添加了可选的静态类型和基于类的面向对象编程;其实TypeScript就是相当于JavaScript的增强版，但是最后运行时还要编译成JavaScript</p>
</blockquote>
<h2 id="demo初始化"><a href="#demo初始化" class="headerlink" title="demo初始化"></a>demo初始化</h2><blockquote>
<p>用npm安装typescript</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install typescript -g //全局安装typescript  成功后使用tsc --version查看是否安装成功</span><br></pre></td></tr></table></figure>
<blockquote>
<p>初始化package.json文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init -y // 使用 -y 标记表示你能接受 package.json 文件的一堆默认值</span><br></pre></td></tr></table></figure>

<blockquote>
<p>生成tsconfig.json文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsc --init //tsconfig.json初始化命令</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装@types/node,使用npm install @types/node –dev-save进行安装。这个主要是解决模块的声明文件问题</p>
</blockquote>
<blockquote>
<p>编写HelloWorld.ts文件，然后进行保存，代码如下</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var test: string = &quot;Hello Word !!&quot;</span><br><span class="line">console.log(test)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Vscode的任务菜单下，打开运行生成任务，然后选择tsc：构建-tsconfig.json，这时候就会生成一个helloWorld.js文件</p>
</blockquote>
<h2 id="TS变量类型"><a href="#TS变量类型" class="headerlink" title="TS变量类型"></a>TS变量类型</h2><p><strong>typescript中的数据类型：</strong></p>
<ul>
<li>Undefined；</li>
<li>Number:数值类型；</li>
<li>string : 字符串类型;</li>
<li>Boolean: 布尔类型；</li>
<li><strong>enum：枚举类型</strong>；</li>
<li><strong>any : 任意类型，一个牛X的类型；</strong></li>
<li><strong>void：空类型；</strong></li>
<li>Array : 数组类型;</li>
<li><strong>Tuple : 元祖类型；</strong></li>
<li>Null ：空类型。</li>
</ul>
<blockquote>
<p><strong>Undefined类型：</strong><br>声明一个变量，不给其赋值，使用该变量时，值为undefined，eg:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var age: number</span><br><span class="line">console.log(age) //undefined</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Number类型：</strong><br>在TypeScript中，所有的数字都是Number类型，这不分是整数还是小数。比如下面我们声明一个年龄是18岁，身高是178.5厘米</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var age:number = 18</span><br><span class="line">var stature:number = 178.5</span><br><span class="line">console.log(age)</span><br><span class="line">console.log(stature)</span><br></pre></td></tr></table></figure>
<p><strong>在TypeScrip中有几种特殊的Number类型:</strong></p>
<ul>
<li>NaN：它是Not a Number 的简写，意思就是不是一个数值。如果一个计算结果或者函数的返回值本应该是数值，但是由于种种原因，他不是数字。出现这种状况不会报错，而是把它的结果看成了NaN。</li>
<li>Infinity :正无穷大</li>
<li>-Infinity：负无穷大。</li>
</ul>
<blockquote>
<p><strong>enum枚举类型:</strong><br>这个世界有很多值是多个并且是固定的，比如：</p>
</blockquote>
<ul>
<li>世界上人的类型：男人、女人、中性</li>
<li>一年的季节：春、夏、秋、冬 ，有四个结果。<br>这时就是我们使用枚举的时机，eg:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum REN&#123;nan, nv, mindle&#125;</span><br><span class="line">console.log(REN.mindle) //返回了2，这是索引index，跟数组很像</span><br></pre></td></tr></table></figure>
如果我们想给这些枚举赋值，可以直接使用=,来进行赋值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum REN &#123;</span><br><span class="line">    nan = &apos;男&apos;,</span><br><span class="line">    nv = &apos;女&apos;,</span><br><span class="line">    mindle = &apos;中性&apos; </span><br><span class="line">&#125;</span><br><span class="line">console.log(REN.mindle) //返回了 中性</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>any类型：</strong><br>有时候我们分不清是什么类型时，ts提供了any类型，这样变化类型，也不会报错, eg:<br><code>var test: any = 10</code></p>
</blockquote>
<h2 id="typescript的函数："><a href="#typescript的函数：" class="headerlink" title="typescript的函数："></a>typescript的函数：</h2><p>typescript函数需要注意的是：</p>
<ul>
<li>声明（定义）函数必须加 function 关键字；</li>
<li>函数名与变量名一样，命名规则按照标识符规则；</li>
<li>函数参数可有可无，多个参数之间用逗号隔开；</li>
<li>每个参数参数由名字与类型组成，之间用分号隔开；</li>
<li>函数的返回值可有可无，没有时，返回类型为 void；</li>
<li>大括号中是函数体</li>
</ul>
<blockquote>
<p><strong>TypeScript语言中的函数参数</strong></p>
</blockquote>
<p>TypeScript的函数参数是比较灵活的，它不像那些早起出现的传统语言那么死板。在TypeScript语言中，函数的形参分为：可选形参、默认形参、剩余参数形参等</p>
<blockquote>
<p><strong>1. 有可选参数的函数</strong></p>
</blockquote>
<p>可选参数，就是我们定义形参的时候，可以定义一个可传可不传的参数。这种参数，在定义函数的时候通过?标注。eg:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function TypeTest(age: number, state: string): string &#123; //此时state就是可选参数</span><br><span class="line">    let yy:string = &quot;&quot;</span><br><span class="line">    yy = &quot;找到了&quot;+age+&apos;岁&apos;</span><br><span class="line">    if(state != undefined) &#123;</span><br><span class="line">        yy = yy + state</span><br><span class="line">    &#125;</span><br><span class="line">    return yy + &quot;的小街基&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>2. 有默认参数的函数</strong></p>
</blockquote>
<p>有默认参数就更好理解了，就是我们不传递的时候，他会给我们一个默认值，而不是undefined了</p>
<p><code>function TypeTest(age: number=18, state: string): string {//age就是默认参数</code></p>
<blockquote>
<p><strong>3.有剩余参数的函数</strong></p>
</blockquote>
<p>传递给函数的参数个数不确定。剩余参数就是形参是一个数组，传递几个实参过来都可以直接存在形参的数组中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function TypeTest(...xuqiu:string[]): string &#123;</span><br><span class="line">//调用</span><br><span class="line">var result:string  =  TypeTest(&apos;22岁&apos;,&apos;222&apos;,&apos;瓜子脸&apos;,&apos;梵蒂冈&apos;)</span><br></pre></td></tr></table></figure>

<h2 id="三种函数的定义方式"><a href="#三种函数的定义方式" class="headerlink" title="三种函数的定义方式"></a>三种函数的定义方式</h2><blockquote>
<p><strong>1. 函数声明法</strong></p>
</blockquote>
<p>函数声明法创建函数是最常用的函数定义法。使用function关键字和函数名去定义一个函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function add(n1:number,n2:number):number&#123;</span><br><span class="line">    return n1+n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>2. 函数表达式法</strong></p>
</blockquote>
<p>函数表达式法是将一个函数赋值给一个变量，这个变量名就是函数名。通过变量名就可以调用函数了。这种方式定义的函数，必须在定义之后，调用函数。下面例子中等号右边的函数没有函数名，称为匿名函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var add = function(n1:number,n2:number):number&#123;</span><br><span class="line">    return n1+n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(add(1,4))</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>3. 箭头函数</strong></p>
</blockquote>
<p>箭头函数是 ES6 中新增的函数定义的新方式，我们的 TypeScript 语言是完全支持 ES6 语法的。箭头函数定义的函数一般都用于回调函数中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var add = (n1:number,n2:number):number=&gt;&#123;</span><br><span class="line">    return n1+n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(add(1,4))</span><br></pre></td></tr></table></figure>

<h2 id="引用类型-数组"><a href="#引用类型-数组" class="headerlink" title="引用类型-数组"></a>引用类型-数组</h2><p>TypeScript中的数据分为值类型和引用类型，前面用的都是值类型，现在虚拟一个人物的对象，代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let webMan = &#123;</span><br><span class="line">    name:&apos;菜前端&apos;,</span><br><span class="line">    website:&apos;jspang.com&apos;,</span><br><span class="line">    age:18,</span><br><span class="line">    saySometing:function()&#123;</span><br><span class="line">        console.log(&apos;为了前端技术&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(webMan.name)</span><br><span class="line">webMan.saySometing()</span><br></pre></td></tr></table></figure>
<p>通过上面的案例，我们看到引用类型是一种复合的数据类型，引用类型中封装了很多对属性，每一对属性都有属性名和属性值</p>
<p>在TypeScript中也给我们提供了一些引用类型，例如：Array（数组）、String（字符串）、Date（日期对象）、RegExp（正则表达式）等</p>
<blockquote>
<p><strong>初始化数组的两种方式</strong></p>
</blockquote>
<p>声明数组跟声明一个普通变量是一样的，都是通过 var let 关键字实现的，只不过数组的类型说明符比较复杂而已</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr1:number[] //声明一个数值类型的数组</span><br><span class="line">let arr2:Array&lt;string&gt; // 声明一个字符串类型的数组</span><br></pre></td></tr></table></figure>

<p><strong>给数组赋值</strong></p>
<p>数组是存储大量数据的集合，声明数组之后，需要给数组存储数据。这时候有两种方法：</p>
<ul>
<li>字面量赋值法：直接使用“[ ]”对数组进行赋值，例如<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//定义一个空数组，数组容量为0</span><br><span class="line">let arr1:number[] = [] </span><br><span class="line">//定义一个数组时，直接给数组赋值</span><br><span class="line">let arr2:number[] = [1,2,3,4,5]</span><br><span class="line">//定义数组 的同事给数组赋值</span><br><span class="line">let arr4:Array&lt;boolean&gt; = [ true,false,false]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是，在TypeScript中指定数据类型的数组只能存储同一类型的数组元素<br>let arr5:number[] = [1,2,true] //报错</p>
</blockquote>
</li>
<li>构造函数赋值法，例如<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr1:number[] = new Array()</span><br><span class="line">let ara2:number[] = new Array(1,2,3,4,5)</span><br><span class="line">let arr4:Array&lt;boolean&gt; = new Array(true,false,false)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>元数组，一种特特的数组，(开发中很少用)</strong></p>
<p>元祖是一种特殊的数组，元祖类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。比如，你可以定义一对值分别为string和number类型的元祖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//声明一个元祖类型</span><br><span class="line">let x : [string,number]</span><br><span class="line">//正确的初始化</span><br><span class="line">x = [&apos;hello&apos;,10] //顺序不能颠倒</span><br></pre></td></tr></table></figure>

<h2 id="引用类型-字符串"><a href="#引用类型-字符串" class="headerlink" title="引用类型-字符串"></a>引用类型-字符串</h2><blockquote>
<p><strong>字符串的两种类型</strong></p>
</blockquote>
<ul>
<li>基本类型字符串：由单引号或者双引号括起来的一串字符串。</li>
<li>引用类型字符串：用new 实例化的 String类型。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let web1:string = &apos;菜前端&apos;</span><br><span class="line">let web2:String = new String(&quot;maozongtai.com&quot;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>常用方法</p>
</blockquote>
</li>
<li>str.indexOf(subStr) 返回索引，没有找到返回-1</li>
<li>lastIndexOf() 从字符串尾部开始查找字符串的位置</li>
<li>str.substring(startIndex,[endIndex]) 截取字符串</li>
<li>str.replace(subStr,newstr) 替换字符串</li>
</ul>
<h2 id="引用类型-日期对象"><a href="#引用类型-日期对象" class="headerlink" title="引用类型-日期对象"></a>引用类型-日期对象</h2><blockquote>
<p>let d:Date = new Date()//参数可以不传，可以是整数(1000)，可以是字符串(‘2018/09/06 05:30:00’)</p>
</blockquote>
<h2 id="引用类型-正则表达式"><a href="#引用类型-正则表达式" class="headerlink" title="引用类型-正则表达式"></a>引用类型-正则表达式</h2><ul>
<li>构造函数法</li>
</ul>
<p><code>let reg2:RegExp = new RegExp(&quot;test&quot;,&#39;gi&#39;)</code></p>
<ul>
<li>字面量法</li>
</ul>
<p><code>let reg2:RegExp = /test/gi</code></p>
<blockquote>
<p>RegExp中常用的方法</p>
</blockquote>
<ul>
<li><p><strong>test(string)</strong>: 在字符串中查找是否存在指定的正则表达式并返回布尔值，如果存在则返回 true，不存在则返回 false。</p>
</li>
<li><p><strong>exec(string)</strong>: 用于在字符串中查找指定正则表达式，如果 exec() 方法执行成功，则返回包含该查找字符串的相关信息数组。如果执行失败，则返回 null</p>
</li>
</ul>
<h2 id="面向对象编程-类的声明跟使用"><a href="#面向对象编程-类的声明跟使用" class="headerlink" title="面向对象编程-类的声明跟使用"></a>面向对象编程-类的声明跟使用</h2><p>TypeScript提供了强大的类的支持，只有会了类才可以new出对象来，下面创建一个Personer的类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Personer &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: string; //跟js不同，ts这里是;</span><br><span class="line">    constructor(name:string, age:string) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    say() &#123;</span><br><span class="line">        console.log(&quot;hello !&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let hanmeimei:Personer = new Personer(&quot;韩梅梅&quot;, &quot;18&quot;);</span><br><span class="line">console.log(hanmeimei);</span><br><span class="line">hanmeimei.say();</span><br></pre></td></tr></table></figure>
<p>我们先用class关键字声明了一个类，并在里边声明了name和age属性。constructor为构造函数。构造函数的主要作用是给类中封装的属性进行赋值</p>
<h2 id="面向对象编程-修饰符"><a href="#面向对象编程-修饰符" class="headerlink" title="面向对象编程-修饰符"></a>面向对象编程-修饰符</h2><p><strong>访问修饰符</strong></p>
<p>访问修饰符分为：public、protected、private</p>
<ul>
<li>public:公有修饰符，可以在类内或者类外使用public修饰的属性或者行为，默认修饰符</li>
<li>protected:受保护的修饰符，可以本类和子类中使用protected修饰的属性和行为</li>
<li>private : 私有修饰符，只可以在类内使用private修饰的属性和行为。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Personer &#123;</span><br><span class="line">    public sex:string;</span><br><span class="line">    protected name:string;</span><br><span class="line">    private age:number;</span><br><span class="line">    constructor(sex:string, name:string, age:number) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public sayHello() &#123;</span><br><span class="line">        console.log(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    protected sayLove() &#123;</span><br><span class="line">        console.log(&quot;I love you&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let hanmeimei:Personer = new Personer(&quot;女&quot;, &quot;韩梅梅&quot;, 18)</span><br><span class="line">console.log(hanmeimei.sex);</span><br><span class="line">console.log(hanmeimei.name); //报错</span><br><span class="line">console.log(hanmeimei.age); //报错</span><br><span class="line">hanmeimei.sayHello();</span><br><span class="line">hanmeimei.sayLove() //报错</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>只读修饰符</strong></p>
<p>使用readonly修饰符将属性设置为只读，只读属性必须在生命时或者构造函数里被初始化（注意）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Man &#123;</span><br><span class="line">    public readonly sex:string = &apos;男&apos;;</span><br><span class="line">&#125;</span><br><span class="line">let man:Man = new Man()</span><br><span class="line">man.sex = &quot;女&quot; //报错</span><br></pre></td></tr></table></figure>

<h2 id="面向对象编程-继承和重写"><a href="#面向对象编程-继承和重写" class="headerlink" title="面向对象编程-继承和重写"></a>面向对象编程-继承和重写</h2><p><strong>类的继承</strong></p>
<p>继承：允许我们创建一个类（子类），从已有的类（父类）上继承所有的属性和方法，子类可以新建父类中没有的属性和方法，我们先创建一个父类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Parent&#123;</span><br><span class="line">    public name:string;</span><br><span class="line">    public age:string;</span><br><span class="line">    public skill:string;</span><br><span class="line">    constructor(name:string, age:string, skill:string) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">    public aihao() &#123;</span><br><span class="line">        console.log(&quot;打球&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let myParent:Parent = new Parent(&quot;JackeyLove&quot;, &quot;18&quot;, &quot;web&quot;)</span><br><span class="line">myParent.aihao();</span><br></pre></td></tr></table></figure>
<p>再创建子类，要求包含父类的信息并有属于自己的技能，用到关键词 extends 如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Son extends Parent&#123;</span><br><span class="line">    public mySkill:string = &quot;读书&quot;;</span><br><span class="line">    public getMenoy() &#123;</span><br><span class="line">        console.log(&quot;一天赚一亿&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let mySon:Son = new Son(&quot;son&quot;, &quot;3&quot;, &quot;吃&quot;); //继承父类的属性</span><br><span class="line">mySon.aihao();</span><br><span class="line">mySon.getMenoy()</span><br></pre></td></tr></table></figure>

<p><strong>类的重写</strong>: 重写就是在子类中重写父类的方法,如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Son extends Parent&#123;</span><br><span class="line">    public mySkill:string = &quot;读书&quot;;</span><br><span class="line">    public aihao() &#123; //重写aihao方法</span><br><span class="line">        super.aihao() //用super调用父类的方法</span><br><span class="line">        console.log(&quot;看定影&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public getMenoy() &#123;</span><br><span class="line">        console.log(&quot;一天赚一亿&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面向对象编程-接口"><a href="#面向对象编程-接口" class="headerlink" title="面向对象编程-接口"></a>面向对象编程-接口</h2><p>定义接口的关键字是<strong>interface</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Personer &#123;</span><br><span class="line">    sex:string</span><br><span class="line">    interest:string</span><br><span class="line">    maiBaoBao?:Boolean</span><br><span class="line">&#125;</span><br><span class="line">let jackson:Personer =&#123; sex:&apos;男&apos;,interest:&apos;看书、作家务&apos;,maiBaoBao:true&#125;</span><br></pre></td></tr></table></figure>
<h2 id="面向对象-命名空间"><a href="#面向对象-命名空间" class="headerlink" title="面向对象-命名空间"></a>面向对象-命名空间</h2><p>命名空间，又称内部模块，被用于组织有些具有内在联系的特性和对象。我们来看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace shuaiDe&#123;</span><br><span class="line">    export class Dehua&#123;</span><br><span class="line">        public name:string = &apos;刘德华&apos;;</span><br><span class="line">        say() &#123;</span><br><span class="line">            console.log(&quot;我是刘德华&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace bajie&#123;</span><br><span class="line">    export class Dehua&#123;</span><br><span class="line">        public name:string = &apos;马德华&apos;;</span><br><span class="line">        say() &#123;</span><br><span class="line">            console.log(&quot;我是二师兄&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let dehua1:shuaiDe.Dehua = new shuaiDe.Dehua();</span><br><span class="line">dehua1.say()</span><br></pre></td></tr></table></figure>
<p>这样就能避免多人开发时造成的命名污染</p>
]]></content>
  </entry>
  <entry>
    <title>cmder环境变量配置</title>
    <url>/cmder%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="Cmder"><a href="#Cmder" class="headerlink" title="Cmder"></a>Cmder</h3><pre><code>电脑系统都自带命令行输入面板，个人感觉样式太难看，而且无法自定义个人喜好使用，所以想搞搞cmder，点击鼠标右键就能快速定位到文件夹，进行操作</code></pre><p>1.官网下载cmder: 官网地址：<a href="http://cmder.net/" target="_blank" rel="noopener">http://cmder.net/</a></p>
<p>2.安装：直接解压到某个目录就可以了，点击Cmder.exe运行。</p>
<p><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/cmder/1.png" alt="img"></p>
<p>3.配置环境变量</p>
<ul>
<li>变量名： CMDER_HOME</li>
<li>变量值： 安装绝对路径</li>
</ul>
<p><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/cmder/2.png" alt="img"></p>
<p>最后在Path添加一条斜体文字</p>
<p>%CMDER_HOME%</p>
<p><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/cmder/3.png" alt="img"></p>
<p>4.添加cmder到右键菜单，方便使用</p>
<p><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/cmder/4.png" alt="img"></p>
<p>然后输入命令：</p>
<p>cmder /register all 回车</p>
<p><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/cmder/5.png" alt="img"></p>
<p>此时点击任何文件夹右键都有了cmder命令</p>
<p>使用问题</p>
<p>1.解决中文乱码问题</p>
<p>Settings-&gt;Startup-&gt;Environment 添加</p>
<p>set LANG=zh_CN.UTF-8</p>
<p>set LC_ALL=zh_CN.utf8</p>
<p><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/cmder/6.png" alt="img"></p>
<p>最后重启cmder就能正常显示</p>
<p>2.常用命令</p>
<ul>
<li>利用Tab，自动路径补全；</li>
<li>利用Ctrl+T建立新页签；利用Ctrl+W关闭页签;</li>
<li>利用Ctrl+Tab切换页签;</li>
<li>Alt+F4：关闭所有页签</li>
<li>Alt+Shift+1：开启cmd.exe</li>
<li>Alt+Shift+2：开启powershell.exe</li>
<li>Alt+Shift+3：开启powershell.exe (系统管理员权限)</li>
<li>Ctrl+1：快速切换到第1个页签</li>
<li>Ctrl+n：快速切换到第n个页签( n值无上限)</li>
<li>Alt + enter： 切换到全屏状态；</li>
<li>Ctr+r 历史命令搜索</li>
<li>dir 可查看文件夹里有多个文件夹和文件</li>
<li>e. 可打开资源管理 页面</li>
</ul>
<p>3.设置aliases及分屏打开vscode</p>
<p>用文本编辑器打开安装路径下 -&gt; config -&gt; user-aliases.cmd</p>
<p>添加相应的命令， 使得可以自定义一些短命令来替代某些长命令：</p>
<p>gc = git commit -am $1 vs = “C:\Program Files\Microsoft VS Code\Code.exe” $1 -new_console:s80H</p>
<p>键入命令 vs 就可直接在窗口右边80%横向打开vscode，若是想纵向打开则更改参数(new_console:s50V)，当中的数字作为百分比。（注意cmder窗口要足够大小才能分栏显示）</p>
]]></content>
  </entry>
  <entry>
    <title>hexo + git博客搭建</title>
    <url>/hexo-git%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="hexo-Github-博客搭建"><a href="#hexo-Github-博客搭建" class="headerlink" title="hexo + Github 博客搭建"></a>hexo + Github 博客搭建</h1><h2 id="前言"><a href="#前言" class="headerlink" title="#前言#"></a>#前言#</h2><pre><code>17年开始做前端的时候搭建了自己的第一个git博客，当时只是简单的玩了下，域名也没有申请备案，这也算为自己的懒惰找个借口吧，再没有花精力弄过，现在域名备案成功！想从新搭建下博客，网上也有一堆详细教程。我在此稍稍总结一下具体的搭建步骤，并且修改博客源码的一些坑和经验分享给大家，希望有所帮助！！废话不多说，开始正题~</code></pre><p>首先是搭建博客用到的框架，我选用基于node.js 的Hexo，可以直接用Markdown语法撰写博客，写好部署到git上就行</p>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><pre><code>node.js可以直接去官网down，推荐使用当前稳定版本，以前安装过的，记着更新下版本，版本过低，hexo安装后执行命令可能会报错（坑已踩过），下载好以后机械式安装就好，这里不做过多介绍，最后通过
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></code></pre><p>查看下node版本信息，如果有版本信息说明安装成功了</p>
<h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>为了让我们本地开发的博客能在外网上访问，我们借助GitHub，安装教程网上很多，自己搜下，安装完成后在命令提示符中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git -v</span><br></pre></td></tr></table></figure>
<p>验证是否安装成功；安装成功后自己按照教程注册一个属于你自己的GitHub账号（作为程序猿，git应该是要有的哦~）<br>然后新增一个项目：如下图<br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/new_project.png" alt="新增工程"><br>然后如下图所示，输入自己的项目名字，后面一定要加.github.io后缀，README初始化最好也要勾上<br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/project_mess.png" alt="工程信息"></p>
<p>项目就建成了，点击Settings，向下拉到最后有个GitHub Pages，点击Choose a theme选择一个主题。然后等一会儿，再回到GitHub Pages，会变成下面这样：<br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/git_pages.png" alt="gitHub Pages"></p>
<p>点击标红的链接，就可以看到自己的网页信息啦，效果图如下：<br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/hexo_show.png" alt="博客网上效果"></p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在本地电脑硬盘在新增一个文件夹用来存放博客源码文件，如我的在 F:\blog_manage\myBlog目录下，点击鼠标右键，点击：Git Bash Here 打开git控制窗口，也可使用window自带的控制台</p>
<p>在myBlog根目录下，输入npm install hexo-cli -g 安装Hexo ,如果有提示，忽略，安装完成后输入hexo -v 验证是否安装成功！</p>
<p>然后就要初始化我们的网站，输入hexo init初始化文件夹，接着输入npm install安装依赖，这样本地的网站配置也弄好啦，hexo g生成静态网页，然后输入hexo s打开本地服务器，然后浏览器打开<a href="http://localhost:4000/，就可以看到新建的本地博客了，看到下图说明本地博客OK了：" target="_blank" rel="noopener">http://localhost:4000/，就可以看到新建的本地博客了，看到下图说明本地博客OK了：</a><br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/mulu.png" alt="目录"><br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/xiaoguo.png" alt="hexo本地效果"></p>
<p>按ctrl+c关闭本地服务器。</p>
<blockquote>
<p>备注：如果4000端口被占用，个人认为最简单方法：可以通过node_modules\hexo-server\index.js文件，可以修改默认的port值，重新hexo s 启动项目</p>
</blockquote>
<h2 id="Git-ssh配置"><a href="#Git-ssh配置" class="headerlink" title="Git ssh配置"></a>Git ssh配置</h2><p>首先设置好git全局配置name和email</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p>然后生成ssh key:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p>控制台中输入cat ~/.ssh/id_rsa.pub将输出的内容复制到框中，点击确定保存<br>最后输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> 如果出现下图所示，说明成功了<br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/git_ssh.png" alt="ssh"><br>打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息,修改最后一行的配置：<br>deploy:<br>  type: git<br>  repository: <a href="https://github.com/zongtmao/zongtai.github.io" target="_blank" rel="noopener">https://github.com/zongtmao/zongtai.github.io</a>  //自己的地址<br>  branch: master</p>
<blockquote>
<p>注意：type repository branch前面两个空格，后面一个，格式错误的话也是部署不成功！！</p>
</blockquote>
<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>首先在博客根目录下右键打开git bash，安装一个扩展npm i hexo-deployer-git。</p>
<p>然后输入hexo new post “test”，新建一篇文章。</p>
<p>然后打开D:\study\program\blog\source_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>
<p>编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦</p>
<h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>现在博客默认的域名还是xxx.github.io,首先你要有备案成功的域名，我已我的阿里云为例，如下图，添加两条解析记录<br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/yuming.png" alt="域名解析"><br>然后打开你的github博客项目，点击settings，拉到下面Custom domain处，填上你自己的域名，保存<br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/success.png" alt="域名绑定"></p>
<h2 id="个性主题设置"><a href="#个性主题设置" class="headerlink" title="个性主题设置"></a>个性主题设置</h2><p>接下来，就是根据自己的喜好，设置自己喜欢的博客主题，本人已Next主题为例<br><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题文档链接</a></p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>git bash 到博客根目录，输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>此时themes文件夹下多了一个next文件夹：<br>F:\blog_manage\myBlog\themes\next<br>说明主题下载成功！</p>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改根目录下_config.yml文件，将theme改成next,重新启动可以看到效果</p>
<p><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/theme_next.png" alt="NEXT"></p>
<h3 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h3><p>定位到F:\blog_manage\myBlog\themes\next文件夹下，打开next文件夹下的_config.yml文件，关键词定位到Scheme，根据自己爱好修改下面的主题：<br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/scheme.png" alt="主题"></p>
<p>其他的个性化配置都可按文档类似配置，比如留言，搜索，标签，添加git入口之类的就不一一介绍了，看下最终的效果图吧：<br><img src="https://raw.githubusercontent.com/zongtmao/markdownPicture/master/images/my_blog.png" alt="博客"></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>分享</tag>
        <tag>总结</tag>
      </tags>
  </entry>
</search>
